// SIMPL+ Module Information
/*
Dealer Name:		Block-O-Matic, Inc.
System Name:		BOM-RESI Text to HTML
Programmer:			mpb
Comments:
*/

// Compiler Directives
#ENABLE_DYNAMIC
#SYMBOL_NAME "BOM-RESI Text to HTML v1_2"
#CATEGORY "46" "BOM-RESI" // Custom
//#CATEGORY "0" // Hidden
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
#DEFINE_CONSTANT MAX_ITEMS       40 

#HELP_BEGIN
This module is only for use inside BOM-RESI modules!!!
#HELP_END        

// DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
DIGITAL_INPUT	_SKIP_, _SKIP_,_SKIP_,
				Refresh;
STRING_INPUT 	_SKIP_,
				Text$[MAX_ITEMS][1000];
STRING_OUTPUT 	_SKIP_, _SKIP_,_SKIP_,_SKIP_, _SKIP_, 
				FormatText$[MAX_ITEMS];

// PARAMETERS
INTEGER_PARAMETER	FontSize_Line1,FontSize_Line2;
STRING_PARAMETER	FontColor[6];


#BEGIN_PARAMETER_PROPERTIES FontSize_Line1
  propValidUnits = unitDecimal;
  propBounds = 0d , 100d;
  propDefaultValue = 22d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES FontSize_Line2
  propValidUnits = unitDecimal;
  propBounds = 0d , 100d;
  propDefaultValue = 16d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES FontColor
	propValidUnits = unitString;
  propDefaultValue = "ffffff";
          propList = {"ffffff","White"},{"000000","Black"};
#END_PARAMETER_PROPERTIES
     
// GLOBAL VARIABLES      
INTEGER i,Marker,Busy;
STRING Line1_Text[100],Line2_Text[100];

// FUNCTION


// EVENT HANDLERS

PUSH Refresh
CHANGE Text$
{
	IF (Busy = 0)
		{
		Busy = 1;
		Wait(50)
		For (i = 1 To MAX_ITEMS -1)
//		i = GetLastModifiedArrayIndex();
			{
    		Marker = FIND ("\x0D",Text$[i]);

			IF (Marker = 0)
				{	
				MAKESTRING(FormatText$[i], "<FONT size=\x22%d\x22 color=\x22#%s\x22>%s</FONT>",FontSize_Line1, FontColor, Text$[i]);
				}		
			ELSE
				{
    	    	Line1_Text = LEFT 	(Text$[i], Marker - 1);
				Line2_Text = RIGHT 	(Text$[i], LEN(Text$[i]) - Marker);
				MAKESTRING(FormatText$[i], "<FONT size=\x22%d\x22 color=\x22#%s\x22>%s<BR><FONT size=\x22%d\x22>%s</FONT></FONT>", FontSize_Line1, FontColor, Line1_Text, FontSize_Line2, Line2_Text);
				}
			}
		Busy = 0;
		}
}

Function Main()
{
	WaitForInitializationComplete();	
	Busy=0; i=0;
}

