// SIMPL+ Module Information
/*
Dealer Name:		FSS
System Name:		Core3 Text Formater
Programmer:			cdr
Comments:
*/

// Compiler Directives
#ENABLE_DYNAMIC
#SYMBOL_NAME "Core3 Text Multi Formater"
#CATEGORY "10" // Serial
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

// DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
DIGITAL_INPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,
							Enable, FormatSet[4];
STRING_INPUT 	Text$[1000];
STRING_OUTPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,
							FormatText$;

// Parameters
INTEGER_PARAMETER	FontSize[4];
STRING_PARAMETER	Color[4][7];

// Parameter Properties
#BEGIN_PARAMETER_PROPERTIES FontSize
  propValidUnits = unitDecimal;
  propBounds = 0d , 500d;
  propDefaultValue = 12d;
#END_PARAMETER_PROPERTIES
#BEGIN_PARAMETER_PROPERTIES Color
	propValidUnits = unitString;
  propDefaultValue = "#000000";
#END_PARAMETER_PROPERTIES

// Global Variables
INTEGER nSet;
STRING	Store$[1000];

// Event Handlers
PUSH FormatSet
{
	nSet = GETLASTMODIFIEDARRAYINDEX ();
	IF(Enable && (LEN(Store$) > 0))
		MAKESTRING(FormatText$, "<P><FONT size=\x22%d\x22 color=\x22%s\x22><cips>%s</cips></FONT></P>",FontSize[nSet], Color[nSet], Store$);

}
CHANGE Text$
{
	Store$ = Text$;
	IF(Enable)
		MAKESTRING(FormatText$, "<P><FONT size=\x22%d\x22 color=\x22%s\x22><cips>%s</cips></FONT></P>",FontSize[nSet], Color[nSet], Store$);
}

