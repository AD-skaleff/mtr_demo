//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.101.8.0
//     UI Plugin:   1.3701.9.0
//
//     Project:     MicrosoftTeamsDemo
//     Version:     1.0.0.0
//     Sdk:         CH5:2.11.1.2
//     Strategy:    Classic
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using MicrosoftTeamsDemo;

namespace MicrosoftTeamsDemo.inCall
{

    /// <summary>
    /// inCall
    /// </summary>
    public partial interface IinCall 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event camSelListBtn.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> camSelListBtn_PressEvent;

        /// <summary>
        /// Event sharingStopBtn.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> sharingStopBtn_PressEvent;

        /// <summary>
        /// Event sys.return.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> sysreturn_PressEvent;

        /// <summary>
        /// camSelListBtn.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void camSelListBtn_Visibility_fb(inCallBoolInputSigDelegate callback);

        /// <summary>
        /// camSelListBtn.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void camSelListBtn_Visibility_fb(bool digital);

        /// <summary>
        /// sharingStopBtn.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void sharingStopBtn_Visibility_fb(inCallBoolInputSigDelegate callback);

        /// <summary>
        /// sharingStopBtn.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void sharingStopBtn_Visibility_fb(bool digital);

        /// <summary>
        /// camSelHeader.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void camSelHeader_Visibility_fb(inCallBoolInputSigDelegate callback);

        /// <summary>
        /// camSelHeader.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void camSelHeader_Visibility_fb(bool digital);

        /// <summary>
        /// inCall.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void inCall_VisibilityJoin(inCallBoolInputSigDelegate callback);

        /// <summary>
        /// inCall.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void inCall_VisibilityJoin(bool digital);

        /// <summary>
        /// camSelListBtn.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void camSelListBtn_Selected(inCallBoolInputSigDelegate callback);

        /// <summary>
        /// camSelListBtn.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void camSelListBtn_Selected(bool digital);

        /// <summary>
        /// sharingStopBtn.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void sharingStopBtn_Selected(inCallBoolInputSigDelegate callback);

        /// <summary>
        /// sharingStopBtn.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void sharingStopBtn_Selected(bool digital);

        /// <summary>
        /// sys.return.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void sysreturn_Selected(inCallBoolInputSigDelegate callback);

        /// <summary>
        /// sys.return.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void sysreturn_Selected(bool digital);

        /// <summary>
        /// camSelListBtn.Indirect Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void camSelListBtn_IndirectText(inCallStringInputSigDelegate callback);

        /// <summary>
        /// camSelListBtn.Indirect Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void camSelListBtn_IndirectText(string serial);

        /// <summary>
        /// ComplexComponent cameraPresetList
        /// </summary>
        MicrosoftTeamsDemo.inCall.IcameraPresetList cameraPresetList { get; }

        /// <summary>
        /// ComplexComponent cameraSelList
        /// </summary>
        MicrosoftTeamsDemo.inCall.IcameraSelList cameraSelList { get; }

        /// <summary>
        /// ComplexComponent cameraDpad
        /// </summary>
        MicrosoftTeamsDemo.inCall.IcameraDpad cameraDpad { get; }

        /// <summary>
        /// ComplexComponent listItem_source
        /// </summary>
        MicrosoftTeamsDemo.inCall.IcontentSharingList contentSharingList { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="incall">The <see cref="IinCall"/> on which to apply the feedback.</param>
    public delegate void inCallBoolInputSigDelegate(BoolInputSig boolInputSig, IinCall incall);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="incall">The <see cref="IinCall"/> on which to apply the feedback.</param>
    public delegate void inCallStringInputSigDelegate(StringInputSig stringInputSig, IinCall incall);

    /// <summary>
    /// inCall
    /// </summary>
    internal partial class inCall : IinCall, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: inCall.camSelListBtn.Press
                /// camSelListBtn.Press
                /// </summary>
                public const uint camSelListBtn_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: inCall.sharingStopBtn.Press
                /// sharingStopBtn.Press
                /// </summary>
                public const uint sharingStopBtn_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: inCall.sysreturn.Press
                /// sys.return.Press
                /// </summary>
                public const uint sysreturn_PressEvent = 4;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: inCall.camSelListBtn.Visibility_fb
                /// camSelListBtn.Visibility
                /// </summary>
                public const uint camSelListBtn_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: inCall.sharingStopBtn.Visibility_fb
                /// sharingStopBtn.Visibility
                /// </summary>
                public const uint sharingStopBtn_Visibility_fbState = 2;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: inCall.camSelHeader.Visibility_fb
                /// camSelHeader.Visibility
                /// </summary>
                public const uint camSelHeader_Visibility_fbState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: inCallVisibilityJoin
                /// inCall.VisibilityJoin
                /// </summary>
                public const uint inCall_VisibilityJoinState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: inCall.camSelListBtn.Selected
                /// camSelListBtn.Selected
                /// </summary>
                public const uint camSelListBtn_SelectedState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: inCall.sharingStopBtn.Selected
                /// sharingStopBtn.Selected
                /// </summary>
                public const uint sharingStopBtn_SelectedState = 7;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: inCall.sysreturn.Selected
                /// sys.return.Selected
                /// </summary>
                public const uint sysreturn_SelectedState = 8;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: inCall.camSelListBtn.IndirectText
                /// camSelListBtn.Indirect Text
                /// </summary>
                public const uint camSelListBtn_IndirectTextState = 1;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="inCall"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal inCall(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="inCall"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal inCall(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="inCall"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 

            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.camSelListBtn_PressEvent, oncamSelListBtn_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.sharingStopBtn_PressEvent, onsharingStopBtn_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.sysreturn_PressEvent, onsysreturn_Press);
            cameraPresetList = new MicrosoftTeamsDemo.inCall.cameraPresetList(ComponentMediator, 5);
            cameraSelList = new MicrosoftTeamsDemo.inCall.cameraSelList(ComponentMediator, 6);
            cameraDpad = new MicrosoftTeamsDemo.inCall.cameraDpad(ComponentMediator, 7);
            contentSharingList = new MicrosoftTeamsDemo.inCall.contentSharingList(ComponentMediator, 8);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((MicrosoftTeamsDemo.inCall.cameraPresetList)cameraPresetList).AddDevice(device);

            ((MicrosoftTeamsDemo.inCall.cameraSelList)cameraSelList).AddDevice(device);

            ((MicrosoftTeamsDemo.inCall.cameraDpad)cameraDpad).AddDevice(device);

            ((MicrosoftTeamsDemo.inCall.contentSharingList)contentSharingList).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((MicrosoftTeamsDemo.inCall.cameraPresetList)cameraPresetList).RemoveDevice(device);

            ((MicrosoftTeamsDemo.inCall.cameraSelList)cameraSelList).RemoveDevice(device);

            ((MicrosoftTeamsDemo.inCall.cameraDpad)cameraDpad).RemoveDevice(device);

            ((MicrosoftTeamsDemo.inCall.contentSharingList)contentSharingList).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> camSelListBtn_PressEvent;
        private void oncamSelListBtn_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = camSelListBtn_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> sharingStopBtn_PressEvent;
        private void onsharingStopBtn_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = sharingStopBtn_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> sysreturn_PressEvent;
        private void onsysreturn_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = sysreturn_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void camSelHeader_Visibility_fb(inCallBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.camSelHeader_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void camSelHeader_Visibility_fb(bool digital)
        {
            camSelHeader_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void camSelListBtn_Selected(inCallBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.camSelListBtn_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void camSelListBtn_Selected(bool digital)
        {
            camSelListBtn_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void camSelListBtn_Visibility_fb(inCallBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.camSelListBtn_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void camSelListBtn_Visibility_fb(bool digital)
        {
            camSelListBtn_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void inCall_VisibilityJoin(inCallBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.inCall_VisibilityJoinState], this);
            }
        }

        /// <inheritdoc/>
        public void inCall_VisibilityJoin(bool digital)
        {
            inCall_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void sharingStopBtn_Selected(inCallBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.sharingStopBtn_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void sharingStopBtn_Selected(bool digital)
        {
            sharingStopBtn_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void sharingStopBtn_Visibility_fb(inCallBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.sharingStopBtn_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void sharingStopBtn_Visibility_fb(bool digital)
        {
            sharingStopBtn_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void sysreturn_Selected(inCallBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.sysreturn_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void sysreturn_Selected(bool digital)
        {
            sysreturn_Selected((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void camSelListBtn_IndirectText(inCallStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.camSelListBtn_IndirectTextState], this);
            }
        }

        /// <inheritdoc/>
        public void camSelListBtn_IndirectText(string serial)
        {
            camSelListBtn_IndirectText((sig, component) => sig.StringValue = serial);
        }

        /// <summary>
        /// ComplexComponent cameraPresetList
        /// </summary>
        public MicrosoftTeamsDemo.inCall.IcameraPresetList cameraPresetList { get; private set; }

        /// <summary>
        /// ComplexComponent cameraSelList
        /// </summary>
        public MicrosoftTeamsDemo.inCall.IcameraSelList cameraSelList { get; private set; }

        /// <summary>
        /// ComplexComponent cameraDpad
        /// </summary>
        public MicrosoftTeamsDemo.inCall.IcameraDpad cameraDpad { get; private set; }

        /// <summary>
        /// ComplexComponent contentSharingList
        /// </summary>
        public MicrosoftTeamsDemo.inCall.IcontentSharingList contentSharingList { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "inCall", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            camSelListBtn_PressEvent = null;
            sharingStopBtn_PressEvent = null;
            sysreturn_PressEvent = null;
        }

        #endregion
    }
}
