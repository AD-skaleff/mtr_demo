//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.101.8.0
//     UI Plugin:   1.3701.9.0
//
//     Project:     MicrosoftTeamsDemo
//     Version:     1.0.0.0
//     Sdk:         CH5:2.11.1.2
//     Strategy:    Classic
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using MicrosoftTeamsDemo;

namespace MicrosoftTeamsDemo.home
{

    /// <summary>
    /// systemPowerPage
    /// </summary>
    public partial interface IsystemPowerPage 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event home.systemPowerPage.shutdownCancel.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> shutdownCancel_PressEvent;

        /// <summary>
        /// Event home.systemPowerPage.shutdownConfirm.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> shutdownConfirm_PressEvent;

        /// <summary>
        /// Event home.systemPowerPage.shutdownDismiss.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> shutdownDismiss_PressEvent;

        /// <summary>
        /// Event home.systemPowerPage.shutdownTimeGauge.Lower Touch (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> shutdownTimeGauge_LowerTouchEvent;

        /// <summary>
        /// systemPowerPage.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void systemPowerPage_Visibility_fb(systemPowerPageBoolInputSigDelegate callback);

        /// <summary>
        /// systemPowerPage.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void systemPowerPage_Visibility_fb(bool digital);

        /// <summary>
        /// home.systemPowerPage.shutdownCancel.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void shutdownCancel_Selected(systemPowerPageBoolInputSigDelegate callback);

        /// <summary>
        /// home.systemPowerPage.shutdownCancel.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void shutdownCancel_Selected(bool digital);

        /// <summary>
        /// home.systemPowerPage.shutdownConfirm.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void shutdownConfirm_Selected(systemPowerPageBoolInputSigDelegate callback);

        /// <summary>
        /// home.systemPowerPage.shutdownConfirm.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void shutdownConfirm_Selected(bool digital);

        /// <summary>
        /// home.systemPowerPage.shutdownDismiss.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void shutdownDismiss_Selected(systemPowerPageBoolInputSigDelegate callback);

        /// <summary>
        /// home.systemPowerPage.shutdownDismiss.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void shutdownDismiss_Selected(bool digital);

        /// <summary>
        /// home.systemPowerPage.shutdownTimeGauge.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void shutdownTimeGauge_LowerTouchfb(systemPowerPageUShortInputSigDelegate callback);

        /// <summary>
        /// home.systemPowerPage.shutdownTimeGauge.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void shutdownTimeGauge_LowerTouchfb(ushort analog);

        /// <summary>
        /// home.systemPowerPage.shutdownTimeGauge.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void shutdownTimeGauge_LowerTouchfb(short analog);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="systempowerpage">The <see cref="IsystemPowerPage"/> on which to apply the feedback.</param>
    public delegate void systemPowerPageBoolInputSigDelegate(BoolInputSig boolInputSig, IsystemPowerPage systempowerpage);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="uShortInputSig">The <see cref="UShortInputSig"/> joinInfo data.</param>
    /// <param name="systempowerpage">The <see cref="IsystemPowerPage"/> on which to apply the feedback.</param>
    public delegate void systemPowerPageUShortInputSigDelegate(UShortInputSig uShortInputSig, IsystemPowerPage systempowerpage);

    /// <summary>
    /// systemPowerPage
    /// </summary>
    internal partial class systemPowerPage : IsystemPowerPage, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: home.systemPowerPage.shutdownCancel.Press
                /// home.systemPowerPage.shutdownCancel.Press
                /// </summary>
                public const uint shutdownCancel_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: home.systemPowerPage.shutdownConfirm.Press
                /// home.systemPowerPage.shutdownConfirm.Press
                /// </summary>
                public const uint shutdownConfirm_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: home.systemPowerPage.shutdownDismiss.Press
                /// home.systemPowerPage.shutdownDismiss.Press
                /// </summary>
                public const uint shutdownDismiss_PressEvent = 4;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: home.systemPowerPage.Visibility_fb
                /// systemPowerPage.Visibility
                /// </summary>
                public const uint systemPowerPage_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: home.systemPowerPage.shutdownCancel.Selected
                /// home.systemPowerPage.shutdownCancel.Selected
                /// </summary>
                public const uint shutdownCancel_SelectedState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: home.systemPowerPage.shutdownConfirm.Selected
                /// home.systemPowerPage.shutdownConfirm.Selected
                /// </summary>
                public const uint shutdownConfirm_SelectedState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: home.systemPowerPage.shutdownDismiss.Selected
                /// home.systemPowerPage.shutdownDismiss.Selected
                /// </summary>
                public const uint shutdownDismiss_SelectedState = 5;

            }
            /// <summary>
            /// Analog signals.
            /// </summary>
            internal static class Numerics
            {
                /// <summary>
                /// Output or Event analog joinInfo from panel to Control System: home.systemPowerPage.shutdownTimeGauge.LowerTouch
                /// home.systemPowerPage.shutdownTimeGauge.Lower Touch
                /// </summary>
                public const uint shutdownTimeGauge_LowerTouchEvent = 4;


                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: home.systemPowerPage.shutdownTimeGauge.LowerTouchfb
                /// home.systemPowerPage.shutdownTimeGauge.Lower Touch fb
                /// </summary>
                public const uint shutdownTimeGauge_LowerTouchfbState = 4;

            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="systemPowerPage"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal systemPowerPage(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="systemPowerPage"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal systemPowerPage(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="systemPowerPage"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 

            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.shutdownCancel_PressEvent, onshutdownCancel_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.shutdownConfirm_PressEvent, onshutdownConfirm_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.shutdownDismiss_PressEvent, onshutdownDismiss_Press);
            ComponentMediator.ConfigureNumericEvent(controlJoinId, Joins.Numerics.shutdownTimeGauge_LowerTouchEvent, onshutdownTimeGauge_LowerTouch);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> shutdownCancel_PressEvent;
        private void onshutdownCancel_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = shutdownCancel_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> shutdownConfirm_PressEvent;
        private void onshutdownConfirm_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = shutdownConfirm_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> shutdownDismiss_PressEvent;
        private void onshutdownDismiss_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = shutdownDismiss_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> shutdownTimeGauge_LowerTouchEvent;
        private void onshutdownTimeGauge_LowerTouch(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = shutdownTimeGauge_LowerTouchEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void shutdownCancel_Selected(systemPowerPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.shutdownCancel_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void shutdownCancel_Selected(bool digital)
        {
            shutdownCancel_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void shutdownConfirm_Selected(systemPowerPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.shutdownConfirm_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void shutdownConfirm_Selected(bool digital)
        {
            shutdownConfirm_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void shutdownDismiss_Selected(systemPowerPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.shutdownDismiss_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void shutdownDismiss_Selected(bool digital)
        {
            shutdownDismiss_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void systemPowerPage_Visibility_fb(systemPowerPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.systemPowerPage_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void systemPowerPage_Visibility_fb(bool digital)
        {
            systemPowerPage_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }

        /// <inheritdoc/>
        public void shutdownTimeGauge_LowerTouchfb(systemPowerPageUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.shutdownTimeGauge_LowerTouchfbState], this);
            }
        }

        /// <inheritdoc/>
        public void shutdownTimeGauge_LowerTouchfb(ushort analog)
        {
            shutdownTimeGauge_LowerTouchfb((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void shutdownTimeGauge_LowerTouchfb(short analog)
        {
            shutdownTimeGauge_LowerTouchfb((sig, component) => sig.ShortValue = analog);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "systemPowerPage", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            shutdownCancel_PressEvent = null;
            shutdownConfirm_PressEvent = null;
            shutdownDismiss_PressEvent = null;
            shutdownTimeGauge_LowerTouchEvent = null;
        }

        #endregion
    }
}
