//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.101.8.0
//     UI Plugin:   1.3701.9.0
//
//     Project:     MicrosoftTeamsDemo
//     Version:     1.0.0.0
//     Sdk:         CH5:2.11.1.2
//     Strategy:    Classic
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using MicrosoftTeamsDemo;

namespace MicrosoftTeamsDemo.home
{

    /// <summary>
    /// home
    /// </summary>
    public partial interface Ihome 
    {
        object UserObject { get; set; }

        /// <summary>
        /// home.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void home_VisibilityJoin(homeBoolInputSigDelegate callback);

        /// <summary>
        /// home.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void home_VisibilityJoin(bool digital);

        /// <summary>
        /// ComplexComponent widgetSrcATV
        /// </summary>
        MicrosoftTeamsDemo.home.IwidgetSrcATV widgetSrcATV { get; }

        /// <summary>
        /// ComplexComponent widgetSrcCameras
        /// </summary>
        MicrosoftTeamsDemo.home.IwidgetSrcCameras widgetSrcCameras { get; }

        /// <summary>
        /// ComplexComponent popUpMics
        /// </summary>
        MicrosoftTeamsDemo.home.popUpMics.IpopUpMics popUpMics { get; }

        /// <summary>
        /// ComplexComponent systemPower
        /// </summary>
        MicrosoftTeamsDemo.home.IsystemPowerPage systemPowerPage { get; }

        /// <summary>
        /// ComplexComponent SourceSelect
        /// </summary>
        MicrosoftTeamsDemo.home.ISourceSelect SourceSelect { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="home">The <see cref="Ihome"/> on which to apply the feedback.</param>
    public delegate void homeBoolInputSigDelegate(BoolInputSig boolInputSig, Ihome home);

    /// <summary>
    /// home
    /// </summary>
    internal partial class home : Ihome, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: homeVisibilityJoin
                /// home.VisibilityJoin
                /// </summary>
                public const uint home_VisibilityJoinState = 1;

            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="home"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal home(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="home"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal home(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="home"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 

            widgetSrcATV = new MicrosoftTeamsDemo.home.widgetSrcATV(ComponentMediator, 7);
            widgetSrcCameras = new MicrosoftTeamsDemo.home.widgetSrcCameras(ComponentMediator, 8);
            popUpMics = new MicrosoftTeamsDemo.home.popUpMics.popUpMics(ComponentMediator, 9);
            systemPowerPage = new MicrosoftTeamsDemo.home.systemPowerPage(ComponentMediator, 11);
            SourceSelect = new MicrosoftTeamsDemo.home.SourceSelect(ComponentMediator, 12);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((MicrosoftTeamsDemo.home.widgetSrcATV)widgetSrcATV).AddDevice(device);

            ((MicrosoftTeamsDemo.home.widgetSrcCameras)widgetSrcCameras).AddDevice(device);

            ((MicrosoftTeamsDemo.home.popUpMics.popUpMics)popUpMics).AddDevice(device);

            ((MicrosoftTeamsDemo.home.systemPowerPage)systemPowerPage).AddDevice(device);

            ((MicrosoftTeamsDemo.home.SourceSelect)SourceSelect).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((MicrosoftTeamsDemo.home.widgetSrcATV)widgetSrcATV).RemoveDevice(device);

            ((MicrosoftTeamsDemo.home.widgetSrcCameras)widgetSrcCameras).RemoveDevice(device);

            ((MicrosoftTeamsDemo.home.popUpMics.popUpMics)popUpMics).RemoveDevice(device);

            ((MicrosoftTeamsDemo.home.systemPowerPage)systemPowerPage).RemoveDevice(device);

            ((MicrosoftTeamsDemo.home.SourceSelect)SourceSelect).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public void home_VisibilityJoin(homeBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.home_VisibilityJoinState], this);
            }
        }

        /// <inheritdoc/>
        public void home_VisibilityJoin(bool digital)
        {
            home_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }

        /// <summary>
        /// ComplexComponent widgetSrcATV
        /// </summary>
        public MicrosoftTeamsDemo.home.IwidgetSrcATV widgetSrcATV { get; private set; }

        /// <summary>
        /// ComplexComponent widgetSrcCameras
        /// </summary>
        public MicrosoftTeamsDemo.home.IwidgetSrcCameras widgetSrcCameras { get; private set; }

        /// <summary>
        /// ComplexComponent popUpMics
        /// </summary>
        public MicrosoftTeamsDemo.home.popUpMics.IpopUpMics popUpMics { get; private set; }

        /// <summary>
        /// ComplexComponent systemPowerPage
        /// </summary>
        public MicrosoftTeamsDemo.home.IsystemPowerPage systemPowerPage { get; private set; }

        /// <summary>
        /// ComplexComponent SourceSelect
        /// </summary>
        public MicrosoftTeamsDemo.home.ISourceSelect SourceSelect { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "home", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

        }

        #endregion
    }
}
